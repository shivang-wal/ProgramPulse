import jsPDF from 'jspdf';
import 'jspdf-autotable';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

// Generate PDF for a single project
export const generateProjectPDF = (project) => {
  try {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    
    // Header
    doc.setFillColor(74, 65, 115); // Purple header
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    // LucyRx branding
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont(undefined, 'bold');
    doc.text('Program Pulse', 20, 25);
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text('keeping a pulse on all LucyRx initiatives', 20, 35);
    
    // Date
    const currentDate = new Date().toLocaleDateString();
    doc.text(`Generated: ${currentDate}`, pageWidth - 80, 25);
    
    // Project Title
    doc.setTextColor(74, 65, 115);
    doc.setFontSize(18);
    doc.setFont(undefined, 'bold');
    doc.text(project.name || 'Project Details', 20, 60);
    
    // Status Badge
    const statusColors = {
      'On Track': [16, 185, 129],
      'At Risk': [245, 158, 11],
      'Delayed': [239, 68, 68],
      'Completed': [99, 102, 241]
    };
    
    const statusColor = statusColors[project.status] || statusColors['On Track'];
    doc.setFillColor(...statusColor);
    doc.roundedRect(20, 70, 40, 12, 2, 2, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(10);
    doc.text(project.status || 'On Track', 22, 78);
    
    // Project Details
    let yPos = 100;
    doc.setTextColor(74, 65, 115);
    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    
    const sections = [
      { title: 'Completed This Week', content: project.completedThisWeek },
      { title: 'Risks', content: project.risks },
      { title: 'Escalation', content: project.escalation },
      { title: 'Planned Next Week', content: project.plannedNextWeek }
    ];
    
    sections.forEach((section) => {
      if (section.content && section.content.trim()) {
        doc.text(section.title, 20, yPos);
        doc.setFont(undefined, 'normal');
        doc.setFontSize(10);
        
        const lines = doc.splitTextToSize(section.content, pageWidth - 40);
        doc.text(lines, 20, yPos + 8);
        yPos += 8 + (lines.length * 5) + 10;
        
        doc.setFont(undefined, 'bold');
        doc.setFontSize(12);
      }
    });
    
    // Bug Severity Table - Use manual table creation instead of autoTable
    if (project.bugs) {
      const bugs = project.bugs;
      const totalBugs = bugs.critical + bugs.high + bugs.medium + bugs.low;
      
      doc.text('Bug Severity Matrix', 20, yPos);
      yPos += 20;
      
      // Manual table creation
      const startX = 20;
      const rowHeight = 12;
      const colWidths = [35, 25, 25, 25, 25, 25];
      
      // Table header
      doc.setFillColor(245, 240, 255);
      doc.rect(startX, yPos, colWidths.reduce((a, b) => a + b, 0), rowHeight, 'F');
      
      doc.setTextColor(74, 65, 115);
      doc.setFontSize(9);
      doc.setFont(undefined, 'bold');
      
      let currentX = startX + 2;
      const headers = ['Severity/Priority', '1-Critical', '2-High', '3-Medium', '4-Low', 'Total'];
      headers.forEach((header, i) => {
        doc.text(header, currentX, yPos + 8);
        currentX += colWidths[i];
      });
      
      yPos += rowHeight;
      
      // Table rows
      const rows = [
        ['Critical', bugs.critical.toString(), '0', '0', '0', bugs.critical.toString()],
        ['High', '0', bugs.high.toString(), '0', '0', bugs.high.toString()],
        ['Medium', '0', '0', bugs.medium.toString(), '0', bugs.medium.toString()],
        ['Low', '0', '0', '0', bugs.low.toString(), bugs.low.toString()],
        ['Total', bugs.critical.toString(), bugs.high.toString(), bugs.medium.toString(), bugs.low.toString(), totalBugs.toString()]
      ];
      
      doc.setFont(undefined, 'normal');
      
      rows.forEach((row, rowIndex) => {
        // Alternate row colors
        if (rowIndex % 2 === 0) {
          doc.setFillColor(250, 250, 250);
          doc.rect(startX, yPos, colWidths.reduce((a, b) => a + b, 0), rowHeight, 'F');
        }
        
        currentX = startX + 2;
        row.forEach((cell, colIndex) => {
          if (colIndex === 0 || rowIndex === 4) { // First column or total row
            doc.setFont(undefined, 'bold');
          } else {
            doc.setFont(undefined, 'normal');
          }
          doc.text(cell, currentX, yPos + 8);
          currentX += colWidths[colIndex];
        });
        
        yPos += rowHeight;
      });
    }
    
    // Footer
    yPos += 20;
    doc.setDrawColor(220, 220, 220);
    doc.line(20, yPos, pageWidth - 20, yPos);
    doc.setTextColor(150, 150, 150);
    doc.setFontSize(8);
    doc.text('Generated by Program Pulse - LucyRx Project Management System', 20, yPos + 10);
    
    return doc;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF: ' + error.message);
  }
};

// Generate PDF for all projects
export const generateAllProjectsPDF = (projects) => {
  try {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    
    // Header
    doc.setFillColor(74, 65, 115);
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont(undefined, 'bold');
    doc.text('Program Pulse', 20, 25);
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text('Project Dashboard Summary', 20, 35);
    
    const currentDate = new Date().toLocaleDateString();
    doc.text(`Generated: ${currentDate}`, pageWidth - 80, 25);
    
    // Summary Table
    doc.setTextColor(74, 65, 115);
    doc.setFontSize(16);
    doc.setFont(undefined, 'bold');
    doc.text('Projects Overview', 20, 60);
    
    // Manual table for all projects
    let yPos = 80;
    const startX = 20;
    const rowHeight = 15;
    const colWidths = [50, 30, 25, 20, 20, 20, 20];
    
    // Table header
    doc.setFillColor(74, 65, 115);
    doc.rect(startX, yPos, colWidths.reduce((a, b) => a + b, 0), rowHeight, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(10);
    doc.setFont(undefined, 'bold');
    
    let currentX = startX + 2;
    const headers = ['Project Name', 'Status', 'Total Bugs', 'Critical', 'High', 'Medium', 'Low'];
    headers.forEach((header, i) => {
      doc.text(header, currentX, yPos + 10);
      currentX += colWidths[i];
    });
    
    yPos += rowHeight;
    
    // Project rows
    doc.setTextColor(74, 65, 115);
    doc.setFontSize(9);
    
    projects.forEach((project, index) => {
      const bugs = project.bugs || { critical: 0, high: 0, medium: 0, low: 0 };
      const totalBugs = bugs.critical + bugs.high + bugs.medium + bugs.low;
      
      // Alternate row colors
      if (index % 2 === 0) {
        doc.setFillColor(248, 248, 248);
        doc.rect(startX, yPos, colWidths.reduce((a, b) => a + b, 0), rowHeight, 'F');
      }
      
      const row = [
        project.name || 'Unnamed Project',
        project.status || 'Unknown',
        totalBugs.toString(),
        bugs.critical.toString(),
        bugs.high.toString(),
        bugs.medium.toString(),
        bugs.low.toString()
      ];
      
      currentX = startX + 2;
      row.forEach((cell, colIndex) => {
        // Truncate long project names
        const maxLength = colIndex === 0 ? 15 : cell.length;
        const displayText = cell.length > maxLength ? cell.substring(0, maxLength) + '...' : cell;
        doc.text(displayText, currentX, yPos + 10);
        currentX += colWidths[colIndex];
      });
      
      yPos += rowHeight;
      
      // Add new page if needed
      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }
    });
    
    return doc;
  } catch (error) {
    console.error('Error generating all projects PDF:', error);
    throw new Error('Failed to generate PDF: ' + error.message);
  }
};

// Export single project as PDF
export const exportProjectAsPDF = (project) => {
  try {
    console.log('Exporting project:', project);
    const doc = generateProjectPDF(project);
    const fileName = `${project.name?.replace(/[^a-z0-9]/gi, '_') || 'project'}_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    console.log('PDF export successful:', fileName);
  } catch (error) {
    console.error('Failed to export project as PDF:', error);
    alert('Failed to generate PDF: ' + error.message);
  }
};

// Export all projects as PDF
export const exportAllProjectsAsPDF = (projects) => {
  try {
    console.log('Exporting all projects:', projects.length);
    if (!projects || projects.length === 0) {
      alert('No projects to export');
      return;
    }
    const doc = generateAllProjectsPDF(projects);
    const fileName = `all_projects_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    console.log('PDF export successful:', fileName);
  } catch (error) {
    console.error('Failed to export all projects as PDF:', error);
    alert('Failed to generate PDF: ' + error.message);
  }
};

// Export projects as Excel
export const exportProjectsAsExcel = (projects) => {
  try {
    console.log('Exporting projects as Excel:', projects.length);
    if (!projects || projects.length === 0) {
      alert('No projects to export');
      return;
    }
    
    // Create workbook
    const wb = XLSX.utils.book_new();
    
    // Projects Summary Sheet
    const summaryData = projects.map(project => {
      const bugs = project.bugs || { critical: 0, high: 0, medium: 0, low: 0 };
      const totalBugs = bugs.critical + bugs.high + bugs.medium + bugs.low;
      
      return {
        'Project Name': project.name || 'Unnamed Project',
        'Status': project.status || 'Unknown',
        'Completed This Week': project.completedThisWeek || '',
        'Risks': project.risks || '',
        'Escalation': project.escalation || '',
        'Planned Next Week': project.plannedNextWeek || '',
        'Total Bugs': totalBugs,
        'Critical Bugs': bugs.critical,
        'High Bugs': bugs.high,
        'Medium Bugs': bugs.medium,
        'Low Bugs': bugs.low,
        'Created Date': project.createdAt ? new Date(project.createdAt).toLocaleDateString() : ''
      };
    });
    
    const summaryWs = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(wb, summaryWs, 'Projects Summary');
  
  // Bug Details Sheet
  const bugDetails = [];
  projects.forEach(project => {
    const bugs = project.bugs || { critical: 0, high: 0, medium: 0, low: 0 };
    
    ['critical', 'high', 'medium', 'low'].forEach(severity => {
      if (bugs[severity] > 0) {
        bugDetails.push({
          'Project Name': project.name || 'Unnamed Project',
          'Project Status': project.status || 'Unknown',
          'Bug Severity': severity.charAt(0).toUpperCase() + severity.slice(1),
          'Bug Count': bugs[severity],
          'Date': new Date().toLocaleDateString()
        });
      }
    });
  });
  
  if (bugDetails.length > 0) {
    const bugWs = XLSX.utils.json_to_sheet(bugDetails);
    XLSX.utils.book_append_sheet(wb, bugWs, 'Bug Details');
  }
  
  // Status Summary Sheet
  const statusSummary = {};
  projects.forEach(project => {
    const status = project.status || 'Unknown';
    if (statusSummary[status]) {
      statusSummary[status]++;
    } else {
      statusSummary[status] = 1;
    }
  });
  
  const statusData = Object.entries(statusSummary).map(([status, count]) => ({
    'Status': status,
    'Project Count': count,
    'Percentage': ((count / projects.length) * 100).toFixed(1) + '%'
  }));
  
  const statusWs = XLSX.utils.json_to_sheet(statusData);
  XLSX.utils.book_append_sheet(wb, statusWs, 'Status Summary');
  
    // Save file
    const fileName = `program_pulse_export_${new Date().toISOString().split('T')[0]}.xlsx`;
    XLSX.writeFile(wb, fileName);
    console.log('Excel export successful:', fileName);
  } catch (error) {
    console.error('Failed to export as Excel:', error);
    alert('Failed to generate Excel file: ' + error.message);
  }
};

// Export all projects as PowerPoint
export const exportAllProjectsAsPPT = async (projects) => {
  try {
    console.log('Exporting projects as PowerPoint:', projects.length);
    if (!projects || projects.length === 0) {
      alert('No projects to export');
      return;
    }

    const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
    
    // Call backend API to generate PPTX
    const response = await fetch(`${BACKEND_URL}/api/export-ppt`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(projects),
    });
    
    if (!response.ok) {
      throw new Error('Failed to generate PowerPoint');
    }
    
    // Download the file
    const blob = await response.blob();
    const fileName = `program_pulse_projects_${new Date().toISOString().split('T')[0]}.pptx`;
    saveAs(blob, fileName);
    
    console.log('PowerPoint export successful:', fileName);
  } catch (error) {
    console.error('Failed to export as PowerPoint:', error);
    alert('Failed to generate PowerPoint file: ' + error.message);
  }
};

// Generate PowerPoint-compatible HTML
const generatePowerPointHTML = (projects) => {
  const colors = {
    purple: '#4A4173',
    lightPurple: '#6B5B95',
    cream: '#FFF9E6',
    peach: '#FFE8CC',
    onTrack: '#10b981',
    atRisk: '#f59e0b',
    delayed: '#ef4444',
    completed: '#6366f1'
  };
  
  const getStatusColor = (status) => {
    const statusMap = {
      'On Track': colors.onTrack,
      'At Risk': colors.atRisk,
      'Delayed': colors.delayed,
      'Completed': colors.completed
    };
    return statusMap[status] || colors.onTrack;
  };
  
  const currentDate = new Date().toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });
  
  let html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Program Pulse - Project Dashboard</title>
  <style>
    @page {
      size: 10in 7.5in landscape;
      margin: 0;
    }
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: Arial, sans-serif;
      background: white;
    }
    .slide {
      width: 10in;
      height: 7.5in;
      page-break-after: always;
      position: relative;
      background: ${colors.cream};
      padding: 0;
      margin: 0 auto 20px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .title-slide {
      background: ${colors.purple};
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      color: white;
    }
    .title {
      font-size: 48px;
      font-weight: bold;
      margin-bottom: 20px;
    }
    .subtitle {
      font-size: 18px;
      font-style: italic;
      margin-bottom: 40px;
    }
    .date {
      font-size: 16px;
      margin-bottom: 10px;
    }
    .project-count {
      font-size: 14px;
      color: #B8A8D9;
    }
    .header-bar {
      background: ${colors.purple};
      height: 60px;
      padding: 0 30px;
      display: flex;
      align-items: center;
      color: white;
      font-size: 14px;
    }
    .content {
      padding: 30px 40px;
    }
    .project-name {
      font-size: 32px;
      font-weight: bold;
      color: ${colors.purple};
      margin-bottom: 20px;
    }
    .status-badge {
      display: inline-block;
      padding: 8px 20px;
      border-radius: 20px;
      color: white;
      font-weight: bold;
      font-size: 14px;
      margin-bottom: 20px;
    }
    .section {
      background: #F5F0FF;
      padding: 15px 20px;
      border-radius: 8px;
      margin-bottom: 15px;
    }
    .section-title {
      font-size: 11px;
      font-weight: bold;
      color: ${colors.lightPurple};
      margin-bottom: 8px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    .section-content {
      font-size: 12px;
      color: ${colors.purple};
      line-height: 1.5;
    }
    .bug-matrix {
      display: flex;
      gap: 15px;
      margin-top: 20px;
    }
    .bug-card {
      flex: 1;
      padding: 15px;
      border-radius: 8px;
      color: white;
      text-align: center;
    }
    .bug-label {
      font-size: 10px;
      font-weight: bold;
      margin-bottom: 8px;
    }
    .bug-count {
      font-size: 24px;
      font-weight: bold;
    }
    .footer {
      position: absolute;
      bottom: 20px;
      left: 0;
      right: 0;
      text-align: center;
      font-size: 10px;
      color: ${colors.lightPurple};
      font-style: italic;
    }
    @media print {
      .slide {
        margin: 0;
        box-shadow: none;
      }
    }
  </style>
</head>
<body>
  <!-- Title Slide -->
  <div class="slide title-slide">
    <div class="title">Program Pulse</div>
    <div class="subtitle">keeping a pulse on all LucyRx initiatives</div>
    <div class="date">${currentDate}</div>
    <div class="project-count">${projects.length} Active Project${projects.length !== 1 ? 's' : ''}</div>
  </div>
  
`;

  // Generate a slide for each project
  projects.forEach((project, index) => {
    const statusColor = getStatusColor(project.status);
    const bugs = project.bugs || { critical: 0, high: 0, medium: 0, low: 0 };
    const totalBugs = bugs.critical + bugs.high + bugs.medium + bugs.low;
    
    html += `
  <!-- Project ${index + 1} Slide -->
  <div class="slide">
    <div class="header-bar">
      Project ${index + 1} of ${projects.length}
    </div>
    <div class="content">
      <div class="project-name">${project.name || 'Unnamed Project'}</div>
      <div class="status-badge" style="background-color: ${statusColor};">
        ${project.status || 'On Track'}
      </div>
`;

    if (project.completedThisWeek) {
      html += `
      <div class="section">
        <div class="section-title">Completed This Week</div>
        <div class="section-content">${project.completedThisWeek}</div>
      </div>
`;
    }

    if (project.risks && project.risks !== 'NA' && project.risks !== 'None') {
      html += `
      <div class="section">
        <div class="section-title">Risks</div>
        <div class="section-content">${project.risks}</div>
      </div>
`;
    }

    if (project.escalation && project.escalation !== 'None') {
      html += `
      <div class="section">
        <div class="section-title">Escalation</div>
        <div class="section-content">${project.escalation}</div>
      </div>
`;
    }

    if (project.plannedNextWeek) {
      html += `
      <div class="section">
        <div class="section-title">Planned Next Week</div>
        <div class="section-content">${project.plannedNextWeek}</div>
      </div>
`;
    }

    if (totalBugs > 0) {
      html += `
      <div style="margin-top: 20px;">
        <div class="section-title" style="margin-bottom: 10px;">Bug Severity Matrix (Total: ${totalBugs})</div>
        <div class="bug-matrix">
          <div class="bug-card" style="background-color: #dc2626;">
            <div class="bug-label">CRITICAL</div>
            <div class="bug-count">${bugs.critical}</div>
          </div>
          <div class="bug-card" style="background-color: #f59e0b;">
            <div class="bug-label">HIGH</div>
            <div class="bug-count">${bugs.high}</div>
          </div>
          <div class="bug-card" style="background-color: #3b82f6;">
            <div class="bug-label">MEDIUM</div>
            <div class="bug-count">${bugs.medium}</div>
          </div>
          <div class="bug-card" style="background-color: #10b981;">
            <div class="bug-label">LOW</div>
            <div class="bug-count">${bugs.low}</div>
          </div>
        </div>
      </div>
`;
    }

    html += `
    </div>
    <div class="footer">Generated by Program Pulse</div>
  </div>
`;
  });

  html += `
</body>
</html>
`;
  
  return html;
};
